{
	"info": {
		"_postman_id": "26dda3ba-cf19-436a-828d-47e2dc45d07a",
		"name": "ASK-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25258253",
		"_collection_link": "https://www.postman.com/klumsyk/workspace/ask-apr25/collection/25258253-26dda3ba-cf19-436a-828d-47e2dc45d07a?action=share&source=collection_link&creator=25258253"
	},
	"item": [
		{
			"name": "Authorizations",
			"item": [
				{
					"name": "sign-in [T] (set token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Role is Teacher\", function () {\r",
									"\tpm.expect(pm.response.text()).to.include(\"TEACHER\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"tokenTeacher\",  pm.response.json().token);\r",
									"\r",
									"\r",
									"\t"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"sandroshatki@bizisstance.com\",\r\n  \"password\": \"123abc\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://ask-qa.portnov.com/api/v1/sign-in",
							"protocol": "http",
							"host": [
								"ask-qa",
								"portnov",
								"com"
							],
							"path": [
								"api",
								"v1",
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign up [S] (set token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body contains 'User was created'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User was created\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{StudentEmail}}\",\r\n  \"name\": \"{{StudentName}}\",\r\n  \"group\": \"API\",\r\n  \"password\": \"{{StudentPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/sign-up",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sign-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "fetch Student Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json()[0];\r",
									"pm.environment.set(\"StudentID\",jsonData.id );\r",
									"pm.environment.set(\"StudentAC\",jsonData.activationCode );\r",
									"pm.environment.set(\"StudentName\",jsonData.name);\r",
									"\r",
									"pm.test(\"Student User ID is \"+(pm.environment.get(\"StudentID\")));\r",
									"\r",
									"pm.test(\"Password is encrypted\"), function (){\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.environment.get(\"StudentPass\"));\r",
									"   \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/users?_where=(email,eq,{{StudentEmail}})",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "_where",
									"value": "(email,eq,{{StudentEmail}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate [S]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body confirms Student acct. activation\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User was activated\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/activate/{{StudentID}}/{{StudentAC}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"activate",
								"{{StudentID}}",
								"{{StudentAC}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "sign-in - [S]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Role is Student\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"STUD\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"tokenStudent\",pm.response.json().token);\r",
									"console.log(\"Student Token obtained: \"+ pm.environment.get(\"tokenStudent\"));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{StudentEmail}}\",\r\n  \"password\": \"{{StudentPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://ask-qa.portnov.com/api/v1/sign-in",
							"protocol": "http",
							"host": [
								"ask-qa",
								"portnov",
								"com"
							],
							"path": [
								"api",
								"v1",
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password [S]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Reset password email was sent.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Reset password email was sent\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{StudentEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/forgot-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "fetch Student Activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"StudentAC\",pm.response.json()[0].activationCode );\r",
									"\r",
									"pm.test(\"New Activation Code obtained: \"+pm.environment.get(\"StudentAC\"));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/users?_where=(email,eq,{{StudentEmail}})",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "_where",
									"value": "(email,eq,{{StudentEmail}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password [S]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Password was changed. New password set to \"+(pm.environment.get(\"StudentPass2\")), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Password was changed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenStudent}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{StudentPass2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reset-password/{{StudentID}}/{{StudentAC}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reset-password",
								"{{StudentID}}",
								"{{StudentAC}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "sign-in - [S] new Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sign-in success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{StudentEmail}}\",\r\n  \"password\": \"{{StudentPass2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://ask-qa.portnov.com/api/v1/sign-in",
							"protocol": "http",
							"host": [
								"ask-qa",
								"portnov",
								"com"
							],
							"path": [
								"api",
								"v1",
								"sign-in"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Quizzes",
			"item": [
				{
					"name": "Create Quiz [T]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body confirms Quiz created\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Success\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"quizId\",pm.response.json().id);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"API Test Quiz\",\r\n  \"totalScore\": 6,\r\n  \"passingPercentage\": 60,\r\n  \"showStopperQuestion\": 1,\r\n  \"questions\": [\r\n    {\r\n      \"type\": \"TEXTUAL\",\r\n      \"question\": \"Created by KP\",\r\n      \"score\": 1\r\n    },\r\n    {\r\n      \"type\": \"SINGLE_CHOICE\",\r\n      \"question\": \"Q2 Single Choice\",\r\n      \"score\": 1,\r\n      \"answer\": 2,\r\n      \"hasOtherOption\": false,\r\n      \"options\": [\r\n        \"San Francisco\",\r\n        \"Redding\"\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"MULTIPLE_CHOICE\",\r\n      \"question\": \"Q3 Multi Choice\",\r\n      \"score\": 4,\r\n      \"answers\": [\r\n        0,\r\n        1,\r\n        2\r\n      ],\r\n      \"hasOtherOption\": true,\r\n      \"options\": [\r\n        \"yes\",\r\n        \"yes\",\r\n        \"yes\",\r\n        \"no\"\r\n      ]\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/quiz",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"quiz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Quiz [T]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body confirms Quiz updated\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"API Test Quiz\",\r\n  \"totalScore\": 6,\r\n  \"passingPercentage\": 60,\r\n  \"showStopperQuestion\": 1,\r\n  \"questions\": [\r\n    {\r\n      \"type\": \"TEXTUAL\",\r\n      \"question\": \"Created by KP\",\r\n      \"score\": 1\r\n    },\r\n    {\r\n      \"type\": \"SINGLE_CHOICE\",\r\n      \"question\": \"Updated content\",\r\n      \"score\": 1,\r\n      \"answer\": 2,\r\n      \"hasOtherOption\": false,\r\n      \"options\": [\r\n        \"San Francisco\",\r\n        \"Redding\"\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"MULTIPLE_CHOICE\",\r\n      \"question\": \"Q3 Multi Choice\",\r\n      \"score\": 4,\r\n      \"answers\": [\r\n        0,\r\n        1,\r\n        2\r\n      ],\r\n      \"hasOtherOption\": true,\r\n      \"options\": [\r\n        \"yes\",\r\n        \"yes\",\r\n        \"yes\",\r\n        \"no\"\r\n      ]\r\n    }\r\n  ],\r\n\t\"id\": {{quizId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/quiz",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"quiz"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Quizzes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"lastQuizId\",pm.response.json()[pm.response.json().length - 1].id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/quizzes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"quizzes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assignment API",
			"item": [
				{
					"name": "Get Assignments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/assignments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//pm.environment.set(\"assignmentId\",pm.response.json()[0].id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"quizId\": {{quizId}},\r\n  \"userIds\": [{{StudentID}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/assignment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assignment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch assignments [S]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									" pm.environment.set(\"AssignmentId\",pm.response.json()[0].id ); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenStudent}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/my-assignments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"my-assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"groupId\", pm.response.json()[0].assignmentGroupID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenStudent}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"assignmentId\": \"{{AssignmentId}}\",\r\n  \"answers\": [\r\n    {\r\n      \"answer\": [\r\n        0 \r\n      ],\r\n      \"textAnswer\": \"This is my answer\"\r\n    },\r\n    {\r\n        \"answer\":[2]\r\n    },\r\n    {\r\n        \"answer\":[1,2,3]\r\n    }\r\n    \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/submit-assignment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"submit-assignment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grade Assignment [T]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"summary\": \"API summary KP\",\r\n  \"result\": \"PASSED\",\r\n  \"grades\": [\r\n    {\r\n      \"comment\": \"Teacher comment\",\r\n      \"additionalScore\": 5\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/assignment/{{AssignmentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assignment",
								"{{AssignmentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Server confirms assignments deletion\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Assignment was deleted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/assignment/{{groupId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assignment",
								"{{groupId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assignments (verify deletion)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"let isFound = false;\r",
									"\r",
									"for (let i = 0; i < jsonData.length; i ++){\r",
									"     if (jsonData[i].id == pm.environment.get(\"AssignmentId\")){\r",
									"        isFound = true;\r",
									"     }\r",
									"}\r",
									"        \r",
									"pm.test(\"Trust but verify. \", function () {\r",
									"    pm.expect(isFound).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/assignments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assignments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User API",
			"item": [
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Last User ID is \"+(pm.response.json()[pm.response.json().length - 1].id));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change User Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User name changed. New user name \"+ (pm.environment.get(\"StudentName\"))+\" Updated\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User name was updated\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{StudentName}} Updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/change-name/{{StudentID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"change-name",
								"{{StudentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change User Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User group changed.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User group was updated\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"group\": \"API_2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/change-group/{{StudentID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"change-group",
								"{{StudentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Group Change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User group change verified\", function() {\r",
									"    pm.expect(pm.response.json()[0].group).to.equal(\"API_2\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/users?_where=(email,eq,{{StudentEmail}})",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "_where",
									"value": "(email,eq,{{StudentEmail}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change User Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Role change reported by system\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User role was updated\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\": \"TEACHER\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/change-role/{{StudentID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"change-role",
								"{{StudentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Role Change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User role change verified\", function() {\r",
									"    pm.expect(pm.response.json()[0].role).to.equal(\"TEACHER\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/users?_where=(email,eq,{{StudentEmail}})",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "_where",
									"value": "(email,eq,{{StudentEmail}})"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete Quiz [quizId]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Quiz was deleted\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Quiz was deleted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/quiz/{{quizId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"quiz",
								"{{quizId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete [S]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'Deleted'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{StudentID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{StudentID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Utility",
			"item": [
				{
					"name": "Delete last Quiz [lastQuizId]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Quiz was deleted\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Quiz was deleted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/quiz/{{lastQuizId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"quiz",
								"{{lastQuizId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenTeacher}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}